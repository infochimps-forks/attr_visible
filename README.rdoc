= AttrVisible

Adds a macro +attr_visible+, reminiscent perhaps of
ActiveRecord::Base#attr_accessible.

Attributes named in this macro are suggested to be non-visible to the outside world.

== !! Please be aware !!

Nothing currently enforces these instructions in general. Only the following
exclusions are applied:

* The various serialization methods (+to_xml+, +to_json+, etc.) are
  monkeypatched to, by default, exclude these attributes. Supplying an +:only+
  option to to_xml and friends will freely override the defaults

* That's it, actually.

This module only allows you to whitelist attributes. This is because
{default permit is dumb}[http://bit.ly/default_permit_is_dumb]

== Example

  class User
    # User has attributes name, email, password; and has_many roles.

    # We want the user to be able to modify her name and email, but not
    # roles.
    attr_accessible       :name, :email, :password

    # The to_xml, to_json, etc will show a user's id, name, and roles -- 
    attr_visible          :id,   :name,  :roles
    # and additionally the value given by the num_posts
    serialize_defaults    :methods => :num_posts

    #  number of posts by this user
    def num_posts
      # ... do stuff ...
    end
  end

Then we would get

  user = User.new("name" => "David", "email" => "foo@bar.com", "password" => "monkey")
  user.to_json # {"user": { "id":1, "name":"David", "email":"foo@bar.com" } }

---------------------------------------------------------------------------

Copyright (c) 2008 Philip (flip) Kromer for infochimps.org
Released under the MIT license
